US_2016_GDP <- GDP_data %>%
filter(`Country Name` == "United States") %>%
#filter(`2016` == max(`2016`)) %>%
pull(`2016`)
View(GDP_data)
View(GDP_data)
# What was the U.S. GDP in 2016?
US_2016_GDP <- GDP_data %>%
filter(`Country.Name` == "United States") %>%
#filter(`2016` == max(`2016`)) %>%
pull(`2016`)
# What was the U.S. GDP in 2016?
US_2016_GDP <- GDP_data %>%
filter(`Country.Name` == "United States") %>%
#filter(`2016` == max(`2016`)) %>%
pull(2016)
# What was the U.S. GDP in 2016?
US_2016_GDP <- GDP_data %>%
filter(`Country.Name` == "United States") %>%
#filter(`2016` == max(`2016`)) %>%
pull(X2016)
India_2016_GDP <- GDP_data %>%
filter(`Country.Name` == "India") %>%
pull(`X2016`)
China_2016_GDP <- GDP_data %>%
filter(`Country.Name` == "China") %>%
pull(`X2016`)
Germany_2016_GDP <- GDP_data %>%
filter(`Country.Name` == "Germany") %>%
pull(`X2016`)
GDP_data <- read.csv("src/data/GDP_data.csv") %>%
rename("2016" = X2016, "Country Name" = Country.Name)
View(GDP_data)
View(GDP_data)
# What was the U.S. GDP in 2016?
US_2016_GDP <- GDP_data %>%
filter(`Country Name` == "United States") %>%
#filter(`2016` == max(`2016`)) %>%
pull(`2016`)
# What was India's GDP in 2016?
India_2016_GDP <- GDP_data %>%
filter(`Country Name` == "India") %>%
pull(`2016`)
# What was China's GDP in 2016?
China_2016_GDP <- GDP_data %>%
filter(`Country Name` == "China") %>%
pull(`2016`)
# What was Germany's GDP in 2016?
Germany_2016_GDP <- GDP_data %>%
filter(`Country Name` == "Germany") %>%
pull(`2016`)
# What was Japan's GDP in 2016?
Japan_2016_GDP <- GDP_data %>%
filter(`Country Name` == "Japan") %>%
pull(`2016`)
# What was Great Britain's GDP in 2016?
United_Kingdom_2016_GDP <- GDP_data %>%
filter(`Country Name` == "United Kingdom") %>%
pull(`2016`)
### Japan  Olympic  2020
#China
jp_olympic_ch_medal <- olympi_medal %>%
filter(Host_country == "Japan") %>%
filter(Year == 2020) %>%
filter(Country_Name == "China")
#Japan
jp_olympic_jp_medal <- olympi_medal %>%
filter(Host_country == "Japan") %>%
filter(Year == 2020) %>%
filter(Country_Name == "Japan")
#India
jp_olympic_in_medal <- olympi_medal %>%
filter(Host_country == "Japan") %>%
filter(Year == 2020) %>%
filter(Country_Name == "India")
#United States
jp_olympic_us_medal <- olympi_medal %>%
filter(Host_country == "Japan") %>%
filter(Year == 2020) %>%
filter(Country_Name == "United States")
#Germany
jp_olympic_ge_medal <- olympi_medal %>%
filter(Host_country == "Japan") %>%
filter(Year == 2020) %>%
filter(Country_Name == "Germany")
#Great Britain
jp_olympic_gb_medal <- olympi_medal %>%
filter(Host_country == "Japan") %>%
filter(Year == 2020) %>%
filter(Country_Name == "Great Britain")
#Medal count of 6 selected country in Tokyo Olympic
tokyo_olympic_selected_country_medal <- rbind(
jp_olympic_ch_medal,
jp_olympic_jp_medal,
jp_olympic_in_medal,
jp_olympic_us_medal,
jp_olympic_gb_medal,
jp_olympic_ge_medal)
### Brazil  Olympic 2016
#China
br_olympic_ch_medal <- olympi_medal %>%
filter(Host_country == "Brazil") %>%
filter(Country_Name == "China")
#Japan
br_olympic_jp_medal <- olympi_medal %>%
filter(Host_country == "Brazil") %>%
filter(Country_Name == "Japan")
#India
br_olympic_in_medal <- olympi_medal %>%
filter(Host_country == "Brazil") %>%
filter(Country_Name == "India")
#United States
br_olympic_us_medal <- olympi_medal %>%
filter(Host_country == "Brazil") %>%
filter(Country_Name == "United States")
#Germany
br_olympic_ge_medal <- olympi_medal %>%
filter(Host_country == "Brazil") %>%
filter(Country_Name == "Germany")
#Great Britain
br_olympic_gb_medal <- olympi_medal %>%
filter(Host_country == "Brazil") %>%
filter(Country_Name == "Great Britain")
#medal count of 6 selected country in Brazil Olympics
brazil_olympic_selected_country_medal <- rbind(
br_olympic_ch_medal,
br_olympic_jp_medal,
br_olympic_in_medal,
br_olympic_us_medal,
br_olympic_gb_medal,
br_olympic_ge_medal)
left_join(brazil_olympic_selected_country_medal,
tokyo_olympic_selected_country_medal,
)
new <- left_join(brazil_olympic_selected_country_medal,
tokyo_olympic_selected_country_medal,
)
View(new)
View(new)
aggregate_gdp_data <- aggregate_gdp_data %>%
rename("2016" = X2016, "Country Name" = Country.Name, "Country Code" = Country.Code)
View(aggregate_gdp_data)
View(aggregate_gdp_data)
aggregate_gdp_data <- aggregate_gdp_data %>%
rename("2016" = X2016, "Country Name" = Country.Name, "Country Code" = Country.Code)
library(tidyverse)
aggregate_gdp_data <- aggregate_gdp_data %>%
rename("2016" = X2016, "Country Name" = Country.Name, "Country Code" = Country.Code)
aggregate_gdp_data <- aggregate_gdp_data %>%
rename("Country Name" = Country.Name, "Country Code" = Country.Code)
library(readr)
worldometer_coronavirus_summary_data <- read_csv("src/data/COVID-19_data/worldometer_coronavirus_summary_data.csv")
View(worldometer_coronavirus_summary_data)
plot(Chart_Avg_Weight)
Sport <- c("Gymnastics", "Gymnastics", "Swimming", "Swimming",
"Weightlifting", "Weightlifting", "Tennis", "Tennis")
Sex <- c("M", "F", "M", "F", "M", "F", "M", "F")
Avg_Weight <- c(avg_men_gym_weight, avg_women_gym_weight, avg_men_swimming_weight, avg_women_swimming_weight,
avg_men_lift_weight, avg_women_lift_weight, avg_men_Tennis_weight, avg_women_Tennis_weight)
Avg_Weight_Chart_Data <- data.frame(Sport, Avg_Weight, Sex)
Chart_Avg_Weight <- ggplot(Avg_Weight_Chart_Data,
aes(Sport, Avg_Weight, col = Sex, fill = Sex)) +
labs(x = "Sports", y = "Average Weight (kg)",
title = "2016 Average Weight for Male and Female Gold Medal Athlethes") +
geom_bar(position= "dodge", stat= "identity")
plot(Chart_Avg_Weight)
# Average weight of women gold medalists for Cycling in 2016
avg_women_Tennis_weight <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "F") %>%
pull(Weight)
avg_women_Cycling_weight <- mean(avg_women_Cycling_weight, trim = 0, na.rm = TRUE)
# Average height of women gold medalists for Cycling in 2016
avg_women_Tennis_height <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "F") %>%
pull(Height)
avg_women_Cycling_height <- mean(avg_women_Cycling_height, trim = 0, na.rm = TRUE)
avg_women_Cycling_weight <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "F") %>%
pull(Weight)
avg_women_Cycling_weight <- mean(avg_women_Cycling_weight, trim = 0, na.rm = TRUE)
# Average height of women gold medalists for Cycling in 2016
avg_women_Cycling_height <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "F") %>%
pull(Height)
avg_women_Cycling_height <- mean(avg_women_Cycling_height, trim = 0, na.rm = TRUE)
library(dplyr)
library(readr)
library(stringr)
library(tidyverse)
athlete_events <- read.csv("src/data/olympic_history/athlete_events.csv")
tokyo_olymic_medal <- read.csv("src/data/olympic_data/Tokyo Medals 2021.csv")
olympi_medal <- read.csv("src/data/Summer_olympic_Medals.csv")
GDP_data <- read.csv("src/data/GDP_data.csv") %>%
rename("2016" = X2016, "Country Name" = Country.Name)
# Average weight of women gold medalists for Cycling in 2016
avg_women_Cycling_weight <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "F") %>%
pull(Weight)
avg_women_Cycling_weight <- mean(avg_women_Cycling_weight, trim = 0, na.rm = TRUE)
# Average height of women gold medalists for Cycling in 2016
avg_women_Cycling_height <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "F") %>%
pull(Height)
avg_women_Cycling_height <- mean(avg_women_Cycling_height, trim = 0, na.rm = TRUE)
# Average weight of men gold medalists for Cycling in 2016
avg_men_Cycling_weight <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "M") %>%
pull(Weight)
avg_men_Cycling_weight <- mean(avg_men_Cycling_weight, trim = 0, na.rm = TRUE)
# Average height of men gold medalists for Cycling in 2016
avg_men_Cycling_height <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "M") %>%
pull(Height)
avg_men_Cycling_height <- mean(avg_men_Cycling_height, trim = 0, na.rm = TRUE)
# Average weight of men gold medalists for Cycling in 2016
avg_men_Cycling_weight <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "M") %>%
pull(Weight)
avg_men_Cycling_weight <- mean(avg_men_Cycling_weight, trim = 0, na.rm = TRUE)
# Average height of men gold medalists for Cycling in 2016
avg_men_Cycling_height <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "M") %>%
pull(Height)
avg_men_Cycling_height <- mean(avg_men_Cycling_height, trim = 0, na.rm = TRUE)
# Average weight of women gold medalists for Basketball in 2016
avg_women_Basketball_weight <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Basketball") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "F") %>%
pull(Weight)
avg_women_Basketball_weight <- mean(avg_women_Basketball_weight, trim = 0, na.rm = TRUE)
# Average height of women gold medalists for Basketball in 2016
avg_women_Basketball_height <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Cycling") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "F") %>%
pull(Height)
avg_women_Basketball_height <- mean(avg_women_Basketball_height, trim = 0, na.rm = TRUE)
# Average weight of men gold medalists for Basketball in 2016
avg_men_Basketball_weight <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Basketball") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "M") %>%
pull(Weight)
avg_men_Basketball_weight <- mean(avg_men_Basketball_weight, trim = 0, na.rm = TRUE)
# Average height of men gold medalists for Basketball in 2016
avg_men_Basketball_height <- athlete_events %>%
filter(`Games` == "2016 Summer") %>%
filter(`Sport` == "Basketball") %>%
filter(`Medal` == "Gold") %>%
filter(`Sex` == "M") %>%
pull(Height)
avg_men_Basketball_height <- mean(avg_men_Basketball_height, trim = 0, na.rm = TRUE)
Sport <- c("Gymnastics", "Gymnastics", "Swimming", "Swimming",
"Weightlifting", "Weightlifting", "Tennis", "Tennis", "Cycling", "Cycling", "Basketball", "Basketball")
Sex <- c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F", "M", "F")
Avg_Weight <- c(avg_men_gym_weight, avg_women_gym_weight, avg_men_swimming_weight, avg_women_swimming_weight,
avg_men_lift_weight, avg_women_lift_weight, avg_men_Tennis_weight, avg_women_Tennis_weight,
avg_men_Cycling_weight, avg_women_Cycling_weight, avg_men_Basketball_weight, avg_women_Basketball_weight)
Avg_Weight_Chart_Data <- data.frame(Sport, Avg_Weight, Sex)
Chart_Avg_Weight <- ggplot(Avg_Weight_Chart_Data,
aes(Sport, Avg_Weight, col = Sex, fill = Sex)) +
labs(x = "Sports", y = "Average Weight (kg)",
title = "2016 Average Weight for Male and Female Gold Medal Athlethes") +
geom_bar(position= "dodge", stat= "identity")
plot(Chart_Avg_Weight)
Sport <- c("Gymnastics", "Gymnastics", "Swimming", "Swimming",
"Weightlifting", "Weightlifting", "Tennis", "Tennis", "Cycling", "Cycling", "Basketball", "Basketball")
Sex <- c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F", "M", "F")
Sport <- c("Gymnastics", "Gymnastics", "Swimming", "Swimming",
"Weightlifting", "Weightlifting", "Tennis", "Tennis", "Cycling", "Cycling", "Basketball", "Basketball")
Sex <- c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F", "M", "F")
Avg_Height <- c(avg_men_gym_height, avg_women_gym_height, avg_men_swimming_height, avg_women_swimming_height,
avg_men_lift_height, avg_women_lift_height, avg_men_Tennis_height, avg_women_Tennis_height,
avg_men_Cycling_height, avg_women_Cycling_height, avg_men_Basketball_height, avg_women_Basketball_height)
Avg_Height_Chart_Data <- data.frame(Sport, Avg_Height, Sex)
Chart_Avg_Height <- ggplot(Avg_Height_Chart_Data,
aes(Sport, Avg_Height, col = Sex, fill = Sex)) +
labs(x = "Sports", y = "Average Height (cm)",
title = "2016 Average Height for Male and Female Gold Medal Athlethes") +
geom_bar(position= "dodge", stat= "identity")
plot(Chart_Avg_Height)
source("Chart1.R")
source("Server.R")
source("Server.R")
# Widget to select sport for weight and height chart
sport_check <- checkboxGroupInput
sport_check_weight <- checkboxGroupInput(inputId = "Sport_Weight",
label = "Sports",
choices = "Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting",
selected = "Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting")
# Widget to select sport for weight and height chart
sport_check_weight <- checkboxGroupInput(inputId = "Sport_Weight",
label = "Sports",
choices = "Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting",
selected = "Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting")
library(ggplot2)
library(dplyr)
library(tidyverse)
# Widget to select sport for weight and height chart
sport_check_weight <- checkboxGroupInput(inputId = "Sport_Weight",
label = "Sports",
choices = "Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting",
selected = "Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting")
library(ggplot2)
library(dplyr)
library(tidyverse)
library(shiny)
# Widget to select sport for weight chart
sport_check_weight <- checkboxGroupInput(inputId = "Sport_Weight",
label = "Sports",
choices = "Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting",
selected = "Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting")
sport_check_weight <- checkboxGroupInput(inputId = "Sport_Weight",
label = "Sports",
choices = c("Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting"),
selected = c("Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting"))
# Widget to select sport for height chart
sport_check_height <- checkboxGroupInput(inputId = "Sport_Height",
label = "Sports",
choices = c("Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting"),
selected = c("Basketball", "Cycling", "Gymnastics",
"Swimming", "Tennis", "Weightlifting"))
Avg_Weight_Chart_Data
weight_chart <- ggplotly(Chart_Avg_Weight)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(shiny)
weight_chart <- ggplotly(Chart_Avg_Weight)
server <- function(input, output) {
output$weight_chart <- renderPlotly({
Avg_Weight_Chart_Data <- Avg_Weight_Chart_Data %>%
filter(Sport == input$Sport_Weight)
Chart_Avg_Weight <- ggplot(Avg_Weight_Chart_Data,
aes(Sport, Avg_Weight, col = Sex, fill = Sex)) +
labs(x = "Sports", y = "Average Weight (kg)",
title = "2016 Average Weight for Male and Female Gold Medal Athlethes") +
geom_bar(position= "dodge", stat= "identity")
weight_chart <- ggplotly(Chart_Avg_Weight)
return(weight_chart)
})
}
output$height_chart <- renderPLotly({
Avg_Height_Chart_Data <- Avg_Height_Chart_Data %>%
filter(Sport == input$Sport_Height)
output$height_chart <- renderPLotly({
Avg_Height_Chart_Data <- Avg_Height_Chart_Data %>%
filter(Sport == input$Sport_Height)
Chart_Avg_Height <- ggplot(Avg_Height_Chart_Data,
aes(Sport, Avg_Height, col = Sex, fill = Sex)) +
labs(x = "Sports", y = "Average Height (cm)",
title = "2016 Average Height for Male and Female Gold Medal Athlethes") +
geom_bar(position= "dodge", stat= "identity")
height_chart <- ggplotly(Chart_Avg_Height)
return(height_chart)
})
}
library(readr)
athlete_events <- read_csv("src/data/olympic_history/athlete_events.csv")
View(athlete_events)
library(readr)
noc_regions <- read_csv("src/data/olympic_history/noc_regions.csv")
View(noc_regions)
map_data <- athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960)
# chart 4
library(ggplot2)
library(dplyr)
library(tidyverse)
library(shiny)
map_data <- athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960)
View(map_data)
map_data <- athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960) %>%
summarize(Medal == c("Gold","Silver", "Bronze"))
athlete_events %>%
group_by(Team)
athlete_events
athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960)
athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960) %>%
arrange(Year)
athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960) %>%
arrange(Year) %>%
filter(Medal == c("Gold", "Silver", "Bronze"))
athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960) %>%
arrange(Year) %>%
filter(Medal == "Gold", "Silver", "Bronze")
athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960) %>%
arrange(Year) %>%
filter(Medal == `Gold`, `Silver`, `Bronze`)
athlete_events %>%
group_by(Team) %>%
filter(Year >= 1960) %>%
arrange(Year) %>%
filter(Medal == "Gold" | Medal == "Silver" | Medal == "Bronze")
athlete_events %>%
filter(Year >= 1960) %>%
arrange(Year) %>%
filter(Medal == "Gold" | Medal == "Silver" | Medal == "Bronze") %>%
group_by(Team)
shortened <- athlete_events[c(7,10,15)]
View(shortened)
map_data <- shortened %>%
filter(Year >= 1960) %>%
arrange(Year) %>%
filter(Medal == "Gold" | Medal == "Silver" | Medal == "Bronze") %>%
group_by(Team)
View(map_data)
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region)
)
world <- map_data("world")
medal_data <- shortened %>%
filter(Year >= 1960) %>%
arrange(Year) %>%
filter(Medal == "Gold" | Medal == "Silver" | Medal == "Bronze") %>%
group_by(Team)
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region)
)
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
) +
geom_polygon(aes(fill = medal_data ), color = "white")+
scale_fill_viridis_c(option = "C")
ggplot() +
geom_map(
data = world, map = world,
aes(x = long, y = lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
) +
geom_polygon(aes(fill = medal_data ), color = "white")+
scale_fill_viridis_c(option = "C")
ggplot() +
geom_map(
data = world, map = world,
aes(x = long, y = lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
View(athlete_events)
